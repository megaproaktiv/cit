// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package citlambda

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/service/lambda"
	"sync"
)

// Ensure, that LambdaInterfaceMock does implement LambdaInterface.
// If this is not the case, regenerate this file with moq.
var _ LambdaInterface = &LambdaInterfaceMock{}

// LambdaInterfaceMock is a mock implementation of LambdaInterface.
//
// 	func TestSomethingThatUsesLambdaInterface(t *testing.T) {
//
// 		// make and configure a mocked LambdaInterface
// 		mockedLambdaInterface := &LambdaInterfaceMock{
// 			GetFunctionFunc: func(ctx context.Context, params *lambda.GetFunctionInput, optFns ...func(*lambda.Options)) (*lambda.GetFunctionOutput, error) {
// 				panic("mock out the GetFunction method")
// 			},
// 			InvokeFunc: func(ctx context.Context, params *lambda.InvokeInput, optFns ...func(*lambda.Options)) (*lambda.InvokeOutput, error) {
// 				panic("mock out the Invoke method")
// 			},
// 		}
//
// 		// use mockedLambdaInterface in code that requires LambdaInterface
// 		// and then make assertions.
//
// 	}
type LambdaInterfaceMock struct {
	// GetFunctionFunc mocks the GetFunction method.
	GetFunctionFunc func(ctx context.Context, params *lambda.GetFunctionInput, optFns ...func(*lambda.Options)) (*lambda.GetFunctionOutput, error)

	// InvokeFunc mocks the Invoke method.
	InvokeFunc func(ctx context.Context, params *lambda.InvokeInput, optFns ...func(*lambda.Options)) (*lambda.InvokeOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetFunction holds details about calls to the GetFunction method.
		GetFunction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *lambda.GetFunctionInput
			// OptFns is the optFns argument value.
			OptFns []func(*lambda.Options)
		}
		// Invoke holds details about calls to the Invoke method.
		Invoke []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *lambda.InvokeInput
			// OptFns is the optFns argument value.
			OptFns []func(*lambda.Options)
		}
	}
	lockGetFunction sync.RWMutex
	lockInvoke      sync.RWMutex
}

// GetFunction calls GetFunctionFunc.
func (mock *LambdaInterfaceMock) GetFunction(ctx context.Context, params *lambda.GetFunctionInput, optFns ...func(*lambda.Options)) (*lambda.GetFunctionOutput, error) {
	if mock.GetFunctionFunc == nil {
		panic("LambdaInterfaceMock.GetFunctionFunc: method is nil but LambdaInterface.GetFunction was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *lambda.GetFunctionInput
		OptFns []func(*lambda.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetFunction.Lock()
	mock.calls.GetFunction = append(mock.calls.GetFunction, callInfo)
	mock.lockGetFunction.Unlock()
	return mock.GetFunctionFunc(ctx, params, optFns...)
}

// GetFunctionCalls gets all the calls that were made to GetFunction.
// Check the length with:
//     len(mockedLambdaInterface.GetFunctionCalls())
func (mock *LambdaInterfaceMock) GetFunctionCalls() []struct {
	Ctx    context.Context
	Params *lambda.GetFunctionInput
	OptFns []func(*lambda.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *lambda.GetFunctionInput
		OptFns []func(*lambda.Options)
	}
	mock.lockGetFunction.RLock()
	calls = mock.calls.GetFunction
	mock.lockGetFunction.RUnlock()
	return calls
}

// Invoke calls InvokeFunc.
func (mock *LambdaInterfaceMock) Invoke(ctx context.Context, params *lambda.InvokeInput, optFns ...func(*lambda.Options)) (*lambda.InvokeOutput, error) {
	if mock.InvokeFunc == nil {
		panic("LambdaInterfaceMock.InvokeFunc: method is nil but LambdaInterface.Invoke was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *lambda.InvokeInput
		OptFns []func(*lambda.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockInvoke.Lock()
	mock.calls.Invoke = append(mock.calls.Invoke, callInfo)
	mock.lockInvoke.Unlock()
	return mock.InvokeFunc(ctx, params, optFns...)
}

// InvokeCalls gets all the calls that were made to Invoke.
// Check the length with:
//     len(mockedLambdaInterface.InvokeCalls())
func (mock *LambdaInterfaceMock) InvokeCalls() []struct {
	Ctx    context.Context
	Params *lambda.InvokeInput
	OptFns []func(*lambda.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *lambda.InvokeInput
		OptFns []func(*lambda.Options)
	}
	mock.lockInvoke.RLock()
	calls = mock.calls.Invoke
	mock.lockInvoke.RUnlock()
	return calls
}
