// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package citses

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/service/ses"
	"sync"
)

// Ensure, that SesInterfaceMock does implement SesInterface.
// If this is not the case, regenerate this file with moq.
var _ SesInterface = &SesInterfaceMock{}

// SesInterfaceMock is a mock implementation of SesInterface.
//
// 	func TestSomethingThatUsesSesInterface(t *testing.T) {
//
// 		// make and configure a mocked SesInterface
// 		mockedSesInterface := &SesInterfaceMock{
// 			ListIdentitiesFunc: func(ctx context.Context, params *ses.ListIdentitiesInput, optFns ...func(*ses.Options)) (*ses.ListIdentitiesOutput, error) {
// 				panic("mock out the ListIdentities method")
// 			},
// 		}
//
// 		// use mockedSesInterface in code that requires SesInterface
// 		// and then make assertions.
//
// 	}
type SesInterfaceMock struct {
	// ListIdentitiesFunc mocks the ListIdentities method.
	ListIdentitiesFunc func(ctx context.Context, params *ses.ListIdentitiesInput, optFns ...func(*ses.Options)) (*ses.ListIdentitiesOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// ListIdentities holds details about calls to the ListIdentities method.
		ListIdentities []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ses.ListIdentitiesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ses.Options)
		}
	}
	lockListIdentities sync.RWMutex
}

// ListIdentities calls ListIdentitiesFunc.
func (mock *SesInterfaceMock) ListIdentities(ctx context.Context, params *ses.ListIdentitiesInput, optFns ...func(*ses.Options)) (*ses.ListIdentitiesOutput, error) {
	if mock.ListIdentitiesFunc == nil {
		panic("SesInterfaceMock.ListIdentitiesFunc: method is nil but SesInterface.ListIdentities was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ses.ListIdentitiesInput
		OptFns []func(*ses.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockListIdentities.Lock()
	mock.calls.ListIdentities = append(mock.calls.ListIdentities, callInfo)
	mock.lockListIdentities.Unlock()
	return mock.ListIdentitiesFunc(ctx, params, optFns...)
}

// ListIdentitiesCalls gets all the calls that were made to ListIdentities.
// Check the length with:
//     len(mockedSesInterface.ListIdentitiesCalls())
func (mock *SesInterfaceMock) ListIdentitiesCalls() []struct {
	Ctx    context.Context
	Params *ses.ListIdentitiesInput
	OptFns []func(*ses.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ses.ListIdentitiesInput
		OptFns []func(*ses.Options)
	}
	mock.lockListIdentities.RLock()
	calls = mock.calls.ListIdentities
	mock.lockListIdentities.RUnlock()
	return calls
}
